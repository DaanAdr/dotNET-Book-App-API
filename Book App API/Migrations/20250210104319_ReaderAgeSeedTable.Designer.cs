// <auto-generated />
using System;
using Book_App_API.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Book_App_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250210104319_ReaderAgeSeedTable")]
    partial class ReaderAgeSeedTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Book_App_API.Domain.Entity.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderAgeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReaderAgeId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.BookGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            GenreName = "Dystopian"
                        },
                        new
                        {
                            Id = 4,
                            GenreName = "Action & Adventure"
                        },
                        new
                        {
                            Id = 5,
                            GenreName = "Mystery"
                        },
                        new
                        {
                            Id = 6,
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            GenreName = "Romance"
                        });
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.ReaderAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReaderAges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "Picture Books (Ages 0-5)"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "Early Readers (Ages 5-7)"
                        },
                        new
                        {
                            Id = 3,
                            AgeRange = "Chapter Books (Ages 7-9)"
                        },
                        new
                        {
                            Id = 4,
                            AgeRange = "Middle Grade (Ages 8-12)"
                        },
                        new
                        {
                            Id = 5,
                            AgeRange = "Young Adult (YA) (Ages 12-18)"
                        },
                        new
                        {
                            Id = 6,
                            AgeRange = "Adult (Ages 18+)"
                        });
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.Book", b =>
                {
                    b.HasOne("Book_App_API.Domain.Entity.ReaderAge", "ReaderAge")
                        .WithMany()
                        .HasForeignKey("ReaderAgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReaderAge");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.BookAuthor", b =>
                {
                    b.HasOne("Book_App_API.Domain.Entity.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_App_API.Domain.Entity.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.BookGenre", b =>
                {
                    b.HasOne("Book_App_API.Domain.Entity.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_App_API.Domain.Entity.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Book_App_API.Domain.Entity.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
